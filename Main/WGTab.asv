classdef WGTab < handle
    properties
        Parent;
        Panel;
        PlotPanel;
        Tab;
        WGInterp;
        ID;
        UIAx;
        UIAxInt;
        WGGuide;
        SSystem;
        IntType;
        SParam;
        Title;
        ResultField;
        LogX=false;
        LogY=false;
        LogZ=false;
    end

    methods
        function obj=WGTab(parent,tabgroup,id)
            obj.Parent=parent;
            
            obj.WGGuide=obj.Parent.WGGuide;
            obj.WGInterp=WGInterp(obj);
            obj.ID=id;
%             obj.Panel=panel;
            obj.Title=num2str(id);
            ntab = uitab(tabgroup,'Title',obj.Title,'ButtonDownFcn',@obj.SetCurrent,'UserData',obj.ID);
            obj.Tab=ntab;

            DrawGUI(obj);
        end

        function delete(obj)
%             ClearCont(obj,obj.Tab);
            obj.Tab.delete;
            delete(obj.WGInterp);
            obj.Parent=[];
        end

        function DrawGUI(obj)
            %Panel
%             ClearCont(obj,obj.Panel);
            g1 = uigridlayout(obj.Tab);
            g1.RowHeight = {'1x'};
            g1.ColumnWidth = {'1x','3x'};

            uip1=uipanel(g1,'Title','Options');
            uip1.Layout.Row=1;
            uip1.Layout.Column=1;
            
            g2 = uigridlayout(uip1);
            g2.RowHeight = {30,30,30,30,30,30,30,'1x'};
            g2.ColumnWidth = {'1x','1x'};
            
            edf1=uieditfield(g2,'Value',sprintf("%d",obj.ID),'Editable','on','ValueChangedFcn',@obj.CChangeName);
            edf1.Layout.Row=1;
            edf1.Layout.Column=2;

            tx1=uilabel(g2,'Text','Name:');
            tx1.Layout.Row=1;
            tx1.Layout.Column=1;

            cbox1=uidropdown(g2,"Items",obj.WGGuide.Param,"ItemsData",1:numel(obj.WGGuide.Param),...
                'ValueChangedFcn',@obj.CParamSel);
            obj.SParam=cbox1.Items{cbox1.Value};
            cbox1.Layout.Row=2;
            cbox1.Layout.Column=2;

            tx1=uilabel(g2,'Text','Parameter:');
            tx1.Layout.Row=2;
            tx1.Layout.Column=1;

            cbox2=uidropdown(g2,"Items",obj.WGGuide.System,"ItemsData",1:numel(obj.WGGuide.System),...
                'ValueChangedFcn',@obj.CSystemSel);
            obj.SSystem=cbox2.Items{cbox2.Value};
            cbox2.Layout.Row=3;
            cbox2.Layout.Column=2;

            tx1=uilabel(g2,'Text','System:');
            tx1.Layout.Row=3;
            tx1.Layout.Column=1;

            cbox3=uidropdown(g2,"Items",["x","x2","x3","x4","proc"],"ItemsData",1:5,...
                'ValueChangedFcn',@obj.CIntType);
            obj.IntType=cbox3.Value;
            cbox3.Layout.Row=4;
            cbox3.Layout.Column=2;

            tx1=uilabel(g2,'Text','InterpretationType:');
            tx1.Layout.Row=4;
            tx1.Layout.Column=1;

%             tx1=uilabel(g2,'Text','Logarytmic X:');
%             tx1.Layout.Row=5;
%             tx1.Layout.Column=1;
            axc=["x","y","z"];
            for i=3
                cbx = uicheckbox(g2, 'Text',sprintf('Logarytmic %s',axc(i)),...
                      'Value', 0,'UserData',axc(i),'ValueChangedFcn',@obj.CSetLog);
                cbx.Layout.Row=5;
                cbx.Layout.Column=[1 2];
            end

            %%
            uip2=uipanel(g1,'Title','Plot');
            uip2.Layout.Row=1;
            uip2.Layout.Column=2;
            
            g3 = uigridlayout(uip2);
            g3.RowHeight = {'1x',210};
            g3.ColumnWidth = {'1x'};
            uiax=uiaxes(g3);
            uiax.Toolbar.Visible = 'off';
            uiax.Interactions = [rotateInteraction];
            uiax.Layout.Row=1;
            uiax.Layout.Column=1;
            obj.UIAx=uiax;

            view(uiax,30,30);
            uip3=uipanel(g3,'Title','Settings');
            uip3.Layout.Row=2;
            uip3.Layout.Column=1;

            g4 = uigridlayout(uip3);
            g4.RowHeight = {25,25,25,25,25,'1x'};
            g4.ColumnWidth = {70,130,'1x'};

            uiax2=uiaxes(g4);
            uiax2.Layout.Row=[1,5];
            uiax2.Layout.Column=3;
            obj.UIAxInt=uiax2;
            
            uib1=uilabel(g4,'Text','x:');
            uib1.Layout.Row=1;
            uib1.Layout.Column=1;

            edf1=uieditfield(g4,'numeric','Editable','on','ValueChangedFcn',@obj.CXPSet);
            edf1.Layout.Row=1;
            edf1.Layout.Column=2;

            uib1=uilabel(g4,'Text','y:');
            uib1.Layout.Row=2;
            uib1.Layout.Column=1;

            edf1=uieditfield(g4,'numeric','Editable','on','ValueChangedFcn',@obj.CYPSet);
            edf1.Layout.Row=2;
            edf1.Layout.Column=2;

            uib1=uilabel(g4,'Text','T:');
            uib1.Layout.Row=3;
            uib1.Layout.Column=1;
            obj.PlotPanel=uip3;

            edf1=uieditfield(g4,'numeric','Editable','on','ValueChangedFcn',@obj.CTPSet);
            edf1.Layout.Row=3;
            edf1.Layout.Column=2;

            uib1=uibutton(g4,'Text','Draw','ButtonPushedFcn',@obj.DrawInterpResult);
            uib1.Layout.Row=4;
            uib1.Layout.Column=[1 2];

            uib1=uilabel(g4,'Text','Result Z:');
            uib1.Layout.Row=5;
            uib1.Layout.Column=1;
            obj.PlotPanel=uip3;

            edf2=uieditfield(g4,'numeric','Editable','on');
            edf2.Layout.Row=5;
            edf2.Layout.Column=2;
            obj.ResultField=edf2;

            

            UpdatePlot(obj);
        end

        function CSetLog(obj,src,evnt)
            switch src.UserData
                case 'x'
                    obj.LogX=src.Value;
                case 'y'
                    obj.LogY=src.Value;
                case 'z'
                    obj.LogZ=src.Value;
            end
            UpdatePlot(obj);
        end
        
        function CChangeName(obj,src,evnt)
            newname=src.Value;
            if ~obj.Parent.CheckName(newname)
                obj.Title=newname;
                obj.Tab.Title=obj.Title;
            else
                fig=obj.Parent.UIFig;
                message = {'Name already taken','PickAnother name'};
                uialert(fig,message,'Warning',...
                'Icon','warning');
                src.Value=obj.Title;
            end
        end

        function CSystemSel(obj,src,evnt)
            obj.SSystem=src.Items{src.Value};
            UpdatePlot(obj);
        end

        function CXPSet(obj,src,evnt)
            lims=obj.WGInterp.Lims;
            val=src.Value;
            if val>=lims.x(1) && val<=lims.x(2)
                obj.WGInterp.XPSet=double(src.Value);
            else
                fig=obj.Parent.UIFig;
                message = {'X value out of limits',char(sprintf("Value must be from %0.2f to %0.2f",lims.x(1),lims.x(2)))};
                uialert(fig,message,'Warning',...
                'Icon','warning');
                src.Value=obj.WGInterp.XPSet;
            end
        end

        function CYPSet(obj,src,evnt)
            lims=obj.WGInterp.Lims;
            val=src.Value;
            if val>=lims.y(1) && val<=lims.y(2)
                obj.WGInterp.YPSet=double(src.Value);
            else
                fig=obj.Parent.UIFig;
                message = {'Y value out of limits',char(sprintf("Value must be from %0.2f to %0.2f",lims.y(1),lims.y(2)))};
                uialert(fig,message,'Warning',...
                'Icon','warning');
                src.Value=obj.WGInterp.YPSet;
            end
        end

        function CTPSet(obj,src,evnt)
            obj.WGInterp.TPSet=double(src.Value);
        end



        function CIntType(obj,src,evnt)
            obj.IntType=src.Value;
            UpdatePlot(obj);
        end

        function CParamSel(obj,src,evnt)
            obj.SParam=src.Items{src.Value};
            UpdatePlot(obj);
        end

        function DrawInterpResult(obj,src,evnt)
            
            obj.WGInterp.plotInter;


        end



        function UpdatePlot(obj)
            d = uiprogressdlg(fig,'Title','Computing SVD',...
        'Indeterminate','on');
            T=obj.WGGuide.FData(obj.WGGuide.FData.('SystÃ©m')==obj.SSystem & obj.WGGuide.FData.('zlabel')==obj.SParam,:);
            if obj.IntType==1
                xl="x";
                yl="y";
                zl="z";
                sl="std";

                xla="xlabel";
                yla="ylabel";
                zla="zlabel";
            elseif obj.IntType>1 && obj.IntType<5
                xl=sprintf("x%d",obj.IntType);
                yl=sprintf("y%d",obj.IntType);
                zl=sprintf("z%d",obj.IntType);
                sl=sprintf("std%d",obj.IntType);

                xla=sprintf("x%dLabel",obj.IntType);
                yla=sprintf("y%dLabel",obj.IntType);
                zla=sprintf("z%dLabel",obj.IntType);
            end

           if obj.IntType<5
                Ti=T.FilteredTable{1}(:,["ID","legend",xl,yl,zl,sl,"Teplota","Ignore"]);
                Ti.Properties.VariableNames={'ID','Legend','x','y','z','std','T','Ignore'};
                xname=string(T.FilteredTable{1}.(xla)(1));
                yname=string(T.FilteredTable{1}.(yla)(1));


                if obj.LogZ
                    Ti.z=log(Ti.z);
                end


                zname=string(T.FilteredTable{1}.(zla)(1));
                obj.WGInterp.SetData(Ti,xname,yname,zname,'T'); 
                plot(obj.WGInterp);
           else

           end
           close(d);
        end

        function ClearCont(obj,container)
            if isvalid(container.Children)
                for ch=container.Children
                    delete(ch);
                end
            end
        end

        function SetCurrent(obj,src,evnt)
            obj.Parent.SetCurrent(obj.ID);
        end
    end
end